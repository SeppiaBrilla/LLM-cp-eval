Reasoning:

1. Decision Variables: The decision variables are the values of the cells in the Sudoku grid. Each cell can take a value from 1 to 9. We can represent the grid as a 2D array of integer variables.

2. Domains: Each cell in the Sudoku grid can take a value from 1 to 9. So, the domain of each cell is {1,2,3,4,5,6,7,8,9}.

3. Constraints: There are three types of constraints in a Sudoku puzzle:
   - Row Constraint: Each row must contain all digits from 1 to 9 exactly once. This can be represented as an 'all_different' constraint on each row of the grid.
   - Column Constraint: Each column must contain all digits from 1 to 9 exactly once. This can be represented as an 'all_different' constraint on each column of the grid.
   - Box Constraint: Each 3x3 box must contain all digits from 1 to 9 exactly once. This can be represented as an 'all_different' constraint on each 3x3 subgrid of the grid.

4. This is a satisfaction problem, as we are looking for a valid assignment of values to the cells that satisfies all the constraints. There is no objective function to optimize.

5. Simplifications/Modeling Choices: We can simplify the model by using the 'all_different' global constraint to represent the row, column, and box constraints. This constraint ensures that all values in a given array are different, which is exactly what we need for the Sudoku constraints.

MiniZinc model:

```minizinc
% Define the Sudoku grid as a 2D array of integer variables
array[1..9, 1..9] of var 1..9: grid;

% Row constraints: all digits in each row must be different
constraint forall(i in 1..9) (
  alldifferent([grid[i,j] | j in 1..9])
);

% Column constraints: all digits in each column must be different
constraint forall(j in 1..9) (
  alldifferent([grid[i,j] | i in 1..9])
);

% Box constraints: all digits in each 3x3 box must be different
constraint forall(bi in 0..2, bj in 0..2) (
  alldifferent([grid[i+bi*3,j+bj*3] | i in 1..3, j in 1..3])
);

% Solve the model
solve satisfy;
```

This model assumes that the Sudoku grid is initially empty. If there are some pre-filled cells in the grid, we can add additional constraints to fix their values.