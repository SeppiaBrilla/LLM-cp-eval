Reasoning:

1. Decision Variables:
   - We need to decide the groups of golfers for each week. This can be represented as a 3-dimensional array `schedule[week, group, golfer]` where `week` is the week number, `group` is the group number in that week, and `golfer` is the golfer number in that group. The value of `schedule[week, group, golfer]` is the golfer's ID.

2. Domains:
   - The domain of `week` is from 1 to `max_weeks`, where `max_weeks` is the maximum number of weeks we want to schedule. We can start with a small number and increase it until we find a solution.
   - The domain of `group` is from 1 to 8, because there are 32 golfers and each group has 4 golfers, so there are 8 groups in each week.
   - The domain of `golfer` is from 1 to 4, because each group has 4 golfers.
   - The domain of `schedule[week, group, golfer]` is from 1 to 32, because there are 32 golfers.

3. Constraints:
   - Each golfer must play once in each week. This can be ensured by the constraint `forall(week in 1..max_weeks)(count(schedule[week,..,..], golfer) = 1 for all golfer in 1..32)`.
   - No golfer plays in the same group as any other golfer on more than one occasion. This can be ensured by the constraint `forall(week1 in 1..max_weeks, week2 in week1+1..max_weeks, group in 1..8)(schedule[week1, group, ..] intersect schedule[week2, group, ..] = {})`.

4. This is a satisfaction problem, because we want to find a schedule that satisfies the constraints, and there is no objective function to optimize.

5. Potential Simplifications or Modeling Choices:
   - We can use a 2-dimensional array `schedule[group, golfer]` for each week, and use a set of these arrays for all weeks. This can simplify the model and make it easier to understand.
   - We can use a binary variable `played_together[golfer1, golfer2]` to indicate whether golfer1 and golfer2 have played together. This can simplify the constraint that no golfer plays in the same group as any other golfer on more than one occasion.

MiniZinc model:
```minizinc
% Define the number of golfers, groups, and maximum weeks
int: num_golfers = 32;
int: num_groups = num_golfers div 4;
int: max_weeks = 10;  % Start with a small number and increase it until we find a solution

% Define the schedule variable
array[1..max_weeks, 1..num_groups, 1..4] of var 1..num_golfers: schedule;

% Each golfer must play once in each week
constraint forall(week in 1..max_weeks)(
  forall(golfer in 1..num_golfers)(
    sum(group in 1..num_groups, player in 1..4)(schedule[week, group, player] = golfer) = 1
  )
);

% No golfer plays in the same group as any other golfer on more than one occasion
constraint forall(week1 in 1..max_weeks, week2 in week1+1..max_weeks, group in 1..num_groups)(
  forall(player1 in 1..4, player2 in player1+1..4)(
    schedule[week1, group, player1] != schedule[week2, group, player2]
  )
);

% Solve the model
solve satisfy;
```