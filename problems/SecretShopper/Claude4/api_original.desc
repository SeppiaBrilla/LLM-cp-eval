**Reasoning:**

1. **Decision Variables:**
   - We need to track which shopper visits which outlet in which week
   - We also need to track how many visits each shopper makes (3 or 4)
   - We need to ensure each salesperson gets exactly 4 visits from different shoppers

2. **Key Parameters:**
   - 19 outlets across 4 areas: Area 1 (outlets 1-5), Area 2 (outlets 6-10), Area 3 (outlets 11-15), Area 4 (outlets 16-19)
   - 40 shoppers in 4 groups of 10 each
   - 35 total salespeople across all outlets (1-4 per outlet)
   - 4 weeks total, with specific timing constraints for first 2 weeks
   - Each shopper visits exactly one outlet per area
   - Total of 140 visits (35 salespeople Ã— 4 visits each)

3. **Domains:**
   - Shoppers: 1-40 (groups 1-10, 11-20, 21-30, 31-40)
   - Outlets: 1-19
   - Weeks: 1-4
   - Areas: 1-4

4. **Key Constraints:**
   - Each shopper visits exactly one outlet per area
   - In each group: 5 shoppers make 3 visits, 5 shoppers make 4 visits
   - Each salesperson visited by 4 different shoppers
   - Timing constraints: all salespeople visited 2 times in first 2 weeks
   - Shoppers with 4 visits: 2 visits by end of week 2
   - Shoppers with 3 visits: 1-2 visits by end of week 2

5. **Modeling Approach:**
   - Use a 3D array for visits: visit[shopper, outlet, week] (binary)
   - Track number of visits per shopper
   - Use auxiliary variables to count visits per salesperson and timing

**MiniZinc model:**

```minizinc
% Cosmetic Company Sales Evaluation Scheduling Problem

% Parameters
int: num_shoppers = 40;
int: num_outlets = 19;
int: num_weeks = 4;
int: num_areas = 4;
int: num_groups = 4;
int: shoppers_per_group = 10;

% Area boundaries for outlets
array[1..4, 1..2] of int: area_bounds = [|1,5|6,10|11,15|16,19|];

% Number of salespeople per outlet (this needs to be specified based on problem instance)
% For now, we'll use a parameter that should sum to 35
array[1..num_outlets] of int: salespeople_per_outlet;
constraint sum(salespeople_per_outlet) = 35;

% Decision variables
% visit[s,o,w] = 1 if shopper s visits outlet o in week w
array[1..num_shoppers, 1..num_outlets, 1..num_weeks] of var 0..1: visit;

% Number of visits each shopper makes (3 or 4)
array[1..num_shoppers] of var 3..4: shopper_visits;

% Auxiliary variables
% visits_to_outlet[o,w] = number of visits to outlet o in week w
array[1..num_outlets, 1..num_weeks] of var 0..num_shoppers: visits_to_outlet;

% Constraint 1: Each shopper visits exactly one outlet per area
constraint forall(s in 1..num_shoppers, a in 1..num_areas)(
    sum(o in area_bounds[a,1]..area_bounds[a,2], w in 1..num_weeks)(visit[s,o,w]) = 1
);

% Constraint 2: Each shopper makes exactly their assigned number of visits
constraint forall(s in 1..num_shoppers)(
    sum(o in 1..num_outlets, w in 1..num_weeks)(visit[s,o,w]) = shopper_visits[s]
);

% Constraint 3: In each group, 5 shoppers make 3 visits and 5 make 4 visits
constraint forall(g in 1..num_groups)(
    sum(s in (g-1)*shoppers_per_group+1..g*shoppers_per_group)(
        bool2int(shopper_visits[s] = 3)
    ) = 5
);

% Constraint 4: Calculate visits to each outlet per week
constraint forall(o in 1..num_outlets, w in 1..num_weeks)(
    visits_to_outlet[o,w] = sum(s in 1..num_shoppers)(visit[s,o,w])
);

% Constraint 5: Each salesperson visited exactly 4 times over 4 weeks
constraint forall(o in 1..num_outlets)(
    sum(w in 1..num_weeks)(visits_to_outlet[o,w]) = salespeople_per_outlet[o] * 4
);

% Constraint 6: All salespeople visited 2 times in first 2 weeks
constraint forall(o in 1..num_outlets)(
    sum(w in 1..2)(visits_to_outlet[o,w]) = salespeople_per_outlet[o] * 2
);

% Constraint 7: Shoppers with 4 visits must have 2 visits by end of week 2
constraint forall(s in 1..num_shoppers)(
    shopper_visits[s] = 4 -> 
    sum(o in 1..num_outlets, w in 1..2)(visit[s,o,w]) = 2
);

% Constraint 8: Shoppers with 3 visits should have 1-2 visits by end of week 2
constraint forall(s in 1..num_shoppers)(
    shopper_visits[s] = 3 -> 
    sum(o in 1..num_outlets, w in 1..2)(visit[s,o,w]) >= 1 /\
    sum(o in 1..num_outlets, w in 1..2)(visit[s,o,w]) <= 2
);

% Constraint 9: Each shopper visits at most one outlet per week
constraint forall(s in 1..num_shoppers, w in 1..num_weeks)(
    sum(o in 1..num_outlets)(visit[s,o,w]) <= 1
);

% Constraint 10: Different shoppers visit each salesperson
% This is implicitly satisfied by the structure, but we ensure no shopper visits same outlet twice
constraint forall(s in 1..num_shoppers, o in 1..num_outlets)(
    sum(w in 1..num_weeks)(visit[s,o,w]) <= 1
);

% For solving, we need to specify salespeople_per_outlet
% This is a sample distribution that sums to 35
salespeople_per_outlet = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1];

solve satisfy;

% Output
output [
    "Shopper " ++ show(s) ++ " visits: " ++ show(shopper_visits[s]) ++ "\n"
    | s in 1..num_shoppers
] ++
[
    "Week " ++ show(w) ++ " visits:\n" ++
    concat([
        "  Outlet " ++ show(o) ++ ": " ++ 
        concat([show(s) ++ " " | s in 1..num_shoppers where visit[s,o,w] = 1]) ++ "\n"
        | o in 1..num_outlets where visits_to_outlet[o,w] > 0
    ])
    | w in 1..num_weeks
];
```